CREATE SCHEMA IF NOT EXISTS public;
SET search_path TO public;

-- Tabela Assinatura
create table public.assinaturas (
  id_assinatura serial not null,
  tipo_plano character varying(50) not null,
  valor numeric(10, 2) not null,
  constraint assinaturas_pkey primary key (id_assinatura)
) TABLESPACE pg_default;

-- Tabela Planos
create table public.planos (
  id_plano bigint generated by default as identity not null,
  data_renovacao date not null,
  desconto real null,
  id_assinatura integer null,
  constraint planos_pkey primary key (id_plano),
  constraint planos_id_assinatura_fkey foreign KEY (id_assinatura) references assinaturas (id_assinatura)
) TABLESPACE pg_default;

-- Tabela Usuário
create table public.usuarios (
  id_usuario serial not null,
  nome character varying(100) not null,
  email character varying(100) not null,
  data_nascimento date not null,
  id_plano bigint null,
  constraint usuarios_pkey primary key (id_usuario),
  constraint usuarios_email_key unique (email),
  constraint usuarios_id_plano_fkey foreign KEY (id_plano) references planos (id_plano)
) TABLESPACE pg_default;

-- Tabela Gênero
create table public.generos (
  id_genero serial not null,
  nome character varying(100) not null,
  descricao text not null,
  constraint generos_pkey primary key (id_genero),
  constraint generos_nome_key unique (nome)
) TABLESPACE pg_default;

-- Tabela Filme
create table public.filmes (
  id_filme serial not null,
  titulo character varying(200) not null,
  duracao integer not null,
  ano_lancamento integer not null,
  constraint filmes_pkey primary key (id_filme)
) TABLESPACE pg_default;

-- Tabela Série
create table public.series (
  id_serie serial not null,
  titulo character varying(200) not null,
  numero_temporadas integer not null,
  status character varying(20) not null,
  constraint series_pkey primary key (id_serie),
  constraint series_status_check check (
    (
      (status)::text = any (
        (
          array[
            'ativa'::character varying,
            'finalizada'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

-- Tabela Avaliação
create table public.avaliacoes (
  id_avaliacao serial not null,
  nota integer not null,
  comentario text null,
  data_avaliacao timestamp without time zone null,
  id_usuario integer null,
  id_serie integer null,
  id_filme integer null,
  constraint avaliacoes_pkey primary key (id_avaliacao),
  constraint avaliacoes_id_filme_fkey foreign KEY (id_filme) references filmes (id_filme),
  constraint avaliacoes_id_serie_fkey foreign KEY (id_serie) references series (id_serie),
  constraint avaliacoes_id_usuario_fkey foreign KEY (id_usuario) references usuarios (id_usuario),
  constraint avaliacoes_nota_check check (
    (
      (nota >= 1)
      and (nota <= 10)
    )
  )
) TABLESPACE pg_default;

-- Tabela GeneroSerie
create table public.genero_serie (
  id_serie integer not null,
  id_genero integer not null,
  classificacao_indicativa text null,
  constraint genero_serie_pkey primary key (id_serie, id_genero),
  constraint genero_serie_id_genero_fkey foreign KEY (id_genero) references generos (id_genero),
  constraint genero_serie_id_serie_fkey foreign KEY (id_serie) references series (id_serie)
) TABLESPACE pg_default;

-- Tabela GeneroFilme
create table public.genero_filme (
  id_filme integer not null,
  id_genero integer not null,
  classificacao_indicativa text null,
  constraint genero_filme_pkey primary key (id_filme, id_genero),
  constraint genero_filme_id_filme_fkey foreign KEY (id_filme) references filmes (id_filme),
  constraint genero_filme_id_genero_fkey foreign KEY (id_genero) references generos (id_genero)
) TABLESPACE pg_default;

